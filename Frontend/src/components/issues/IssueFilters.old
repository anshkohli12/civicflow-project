"use client"
import { Filter, X } from "lucide-react"

const IssueFilters = ({ filters, onFilterChange, issueCount, totalCount }) => {
  const categories = [
    { value: "", label: "All Categories" },
    { value: "Infrastructure", label: "Infrastructure" },
    { value: "Safety", label: "Safety" },
    { value: "Environment", label: "Environment" },
    { value: "Parks", label: "Parks & Recreation" },
    { value: "Transportation", label: "Transportation" },
    { value: "Roads", label: "Roads" },
    { value: "Utilities", label: "Utilities" },
    { value: "Cleanliness", label: "Cleanliness" },
    { value: "Vandalism", label: "Vandalism" },
    { value: "Other", label: "Other" },
  ]

  const statuses = [
    { value: "", label: "All Statuses" },
    { value: "OPEN", label: "Open" },
    { value: "IN_PROGRESS", label: "In Progress" },
    { value: "RESOLVED", label: "Resolved" },
    { value: "CLOSED", label: "Closed" },
  ]

  const criticalOptions = [
    { value: "", label: "All Issues" },
    { value: "true", label: "Critical Only" },
    { value: "false", label: "Non-Critical Only" },
  ]

  const sortOptions = [
    { value: "newest", label: "Newest First" },
    { value: "oldest", label: "Oldest First" },
    { value: "mostVotes", label: "Most Voted" },
    { value: "leastVotes", label: "Least Voted" },
    { value: "title", label: "Title A-Z" },
  ]

  const hasActiveFilters = filters.category || filters.status || filters.critical !== null || filters.search

  const clearFilters = () => {
    onFilterChange({
      search: "",
      category: "",
      status: "",
      critical: null,
      sortBy: "newest",
    })
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-2">
          <Filter className="h-5 w-5 text-slate-600" />
          <h3 className="text-lg font-semibold text-slate-900">Filters</h3>
        </div>
        {hasActiveFilters && (
          <button
            onClick={clearFilters}
            className="text-sm text-blue-600 hover:text-blue-700 flex items-center space-x-1"
          >
            <X className="h-4 w-4" />
            <span>Clear</span>
          </button>
        )}
      </div>

      <div className="space-y-6">
        {/* Results Count */}
        <div className="text-sm text-slate-600">
          Showing {issueCount} of {totalCount || issueCount} {(totalCount || issueCount) === 1 ? "issue" : "issues"}
        </div>

        {/* Sort By */}
        <div>
          <label htmlFor="sortBy" className="block text-sm font-medium text-slate-700 mb-2">
            Sort By
          </label>
          <select
            id="sortBy"
            value={filters.sortBy}
            onChange={(e) => onFilterChange({ sortBy: e.target.value })}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {sortOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Category Filter */}
        <div>
          <label htmlFor="category" className="block text-sm font-medium text-slate-700 mb-2">
            Category
          </label>
          <select
            id="category"
            value={filters.category}
            onChange={(e) => onFilterChange({ category: e.target.value })}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {categories.map((category) => (
              <option key={category.value} value={category.value}>
                {category.label}
              </option>
            ))}
          </select>
        </div>

        {/* Status Filter */}
        <div>
          <label htmlFor="status" className="block text-sm font-medium text-slate-700 mb-2">
            Status
          </label>
          <select
            id="status"
            value={filters.status}
            onChange={(e) => onFilterChange({ status: e.target.value })}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {statuses.map((status) => (
              <option key={status.value} value={status.value}>
                {status.label}
              </option>
            ))}
          </select>
        </div>

        {/* Critical Filter */}
        <div>
          <label htmlFor="critical" className="block text-sm font-medium text-slate-700 mb-2">
            Priority
          </label>
          <select
            id="critical"
            value={filters.critical === null ? "" : filters.critical.toString()}
            onChange={(e) => {
              const value = e.target.value
              onFilterChange({ 
                critical: value === "" ? null : value === "true" 
              })
            }}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {criticalOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Quick Filter Buttons */}
        <div>
          <label className="block text-sm font-medium text-slate-700 mb-2">
            Quick Filters
          </label>
          <div className="grid grid-cols-1 gap-2">
            <button
              onClick={() => onFilterChange({ critical: true })}
              className={`text-left px-3 py-2 rounded-lg text-sm transition-colors ${
                filters.critical === true
                  ? "bg-red-100 text-red-700 border border-red-200"
                  : "bg-slate-50 text-slate-700 hover:bg-slate-100 border border-slate-200"
              }`}
            >
              ðŸš¨ Critical Issues
            </button>
            <button
              onClick={() => onFilterChange({ status: "OPEN" })}
              className={`text-left px-3 py-2 rounded-lg text-sm transition-colors ${
                filters.status === "OPEN"
                  ? "bg-blue-100 text-blue-700 border border-blue-200"
                  : "bg-slate-50 text-slate-700 hover:bg-slate-100 border border-slate-200"
              }`}
            >
              ðŸ“‹ Open Issues
            </button>
            <button
              onClick={() => onFilterChange({ status: "RESOLVED" })}
              className={`text-left px-3 py-2 rounded-lg text-sm transition-colors ${
                filters.status === "RESOLVED"
                  ? "bg-green-100 text-green-700 border border-green-200"
                  : "bg-slate-50 text-slate-700 hover:bg-slate-100 border border-slate-200"
              }`}
            >
              âœ… Resolved Issues
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default IssueFilters

  return (
    <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-2">
          <Filter className="h-5 w-5 text-slate-600" />
          <h3 className="text-lg font-semibold text-slate-900">Filters</h3>
        </div>
        {hasActiveFilters && (
          <button
            onClick={clearFilters}
            className="text-sm text-blue-600 hover:text-blue-700 flex items-center space-x-1"
          >
            <X className="h-4 w-4" />
            <span>Clear</span>
          </button>
        )}
      </div>

      <div className="space-y-6">
        {/* Results Count */}
        <div className="text-sm text-slate-600">
          {issueCount} {issueCount === 1 ? "issue" : "issues"} found
        </div>

        {/* Sort By */}
        <div>
          <label htmlFor="sortBy" className="block text-sm font-medium text-slate-700 mb-2">
            Sort By
          </label>
          <select
            id="sortBy"
            value={filters.sortBy}
            onChange={(e) => onFilterChange({ sortBy: e.target.value })}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {sortOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Category Filter */}
        <div>
          <label htmlFor="category" className="block text-sm font-medium text-slate-700 mb-2">
            Category
          </label>
          <select
            id="category"
            value={filters.category}
            onChange={(e) => onFilterChange({ category: e.target.value })}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {categories.map((category) => (
              <option key={category.value} value={category.value}>
                {category.label}
              </option>
            ))}
          </select>
        </div>

        {/* Status Filter */}
        <div>
          <label htmlFor="status" className="block text-sm font-medium text-slate-700 mb-2">
            Status
          </label>
          <select
            id="status"
            value={filters.status}
            onChange={(e) => onFilterChange({ status: e.target.value })}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {statuses.map((status) => (
              <option key={status.value} value={status.value}>
                {status.label}
              </option>
            ))}
          </select>
        </div>

        {/* Priority Filter */}
        <div>
          <label htmlFor="priority" className="block text-sm font-medium text-slate-700 mb-2">
            Priority
          </label>
          <select
            id="priority"
            value={filters.priority}
            onChange={(e) => onFilterChange({ priority: e.target.value })}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            {priorities.map((priority) => (
              <option key={priority.value} value={priority.value}>
                {priority.label}
              </option>
            ))}
          </select>
        </div>
      </div>
    </div>
  )
}

export default IssueFilters
